public boolean firstLast6(int[] nums) {
  if (nums[0] == 6 || nums[nums.length-1] == 6)
    return true;
  else return false;
}

----------------------------------------------------

public boolean sameFirstLast(int[] nums)
{	return (nums.length >= 1 && nums[0] ==  nums[nums.length-1]);}

----------------------------------------------------

public int[] makePi()
{	
	int[] pi = {3, 1, 4}; 
	return pi;
}

----------------------------------------------------

public boolean commonEnd(int[] a, int[] b)
{	return (a[0] == b[0] || a[a.length-1] == b[b.length-1]);	}

----------------------------------------------------

public int sum3(int[] nums)
{	return (nums[0] + nums[1] + nums[2]);	}

----------------------------------------------------

public int[] rotateLeft3(int[] nums)
{
	int[] rotated = {nums[1], nums[2], nums[0]};
	return rotated;
}

----------------------------------------------------

public int[] reverse3(int[] nums)
{
 	int[] reversed = {nums[2], nums[1], nums[0]};
	return reversed;
}

----------------------------------------------------

public int[] maxEnd3(int[] nums)
{
	int[] maxVal = new int[3];
	maxVal[0] = nums[0];
	if(nums[2] >= maxVal[0])
		maxVal[0] = nums[2];
	maxVal[1] = maxVal[0];
	maxVal[2] = maxVal[0];
	return maxVal;
}

----------------------------------------------------

public int sum2(int[] nums)
{
	if(nums.length >= 2)
		return (nums[0] + nums[1]);
	if(nums.length == 1)
		return nums[0];
	return 0;
}

----------------------------------------------------

public int[] middleWay(int[] a, int[] b)
{
	int[] mids = {a[1], b[1]};
	return mids;
}

----------------------------------------------------

public int[] makeEnds(int[] nums)
{
	int[] temp = {nums[0], nums[nums.length-1]};
	return temp;
}

----------------------------------------------------

public boolean has23(int[] nums)
{
	if(nums[0] == 2 || nums[0] == 3)
		return true;
	return (nums[1] == 2 || nums[1] == 3);
}

----------------------------------------------------

public boolean no23(int[] nums)
{
	if(nums[0] == 2 || nums[0] == 3)
		return false;
	return !(nums[1] == 2 || nums[1] == 3);
}

----------------------------------------------------

public int[] makeLast(int[] nums)
{
	int len = nums.length*2;
	int[] dubsArr = new int[len];
	dubsArr[len-1] = nums[nums.length-1];
	return dubsArr;
}

----------------------------------------------------

public boolean double23(int[] nums)
{
	if(nums.length == 2)
	{
		if(nums[0] == 2 && nums[1] == 2)
			return true;
		return (nums[0] == 3 && nums[1] == 3);
	}
	return false;
}

----------------------------------------------------

public int[] fix23(int[] nums)
{
	int[] fxArr = {nums[0], nums[1], nums[2]};
	if(nums[0] == 2 && nums[1] == 3)
			fxArr[1] = 0;
	if(nums[1] == 2 && nums[2] == 3)
			fxArr[2] = 0;
	return fxArr;
}

----------------------------------------------------

public int start1(int[] a, int[] b)
{
	int ones = 0;
	if(a.length >= 1 && a[0] == 1)
		ones += 1;
	if(b.length >= 1 && b[0] == 1)
		ones += 1;
	return ones;
}

----------------------------------------------------

public int[] biggerTwo(int[] a, int[] b)
{
	int sum = a[0]+a[1]-b[0]-b[1];
	if(sum >= 0)
		return a;
	return b;
}

----------------------------------------------------

public int[] makeMiddle(int[] nums)
{
	int[] midArr = new int[2];
	int half = nums.length/2;
	midArr[0] = nums[half-1];
	midArr[1] = nums[half];
	return midArr;
}

----------------------------------------------------

public int[] plusTwo(int[] a, int[] b)
{
	int[] combArr = {a[0], a[1], b[0], b[1]};
	return combArr;
}

----------------------------------------------------

public int[] swapEnds(int[] nums)
{
	int temp = nums[0];
	nums[0] = nums[nums.length-1];
	nums[nums.length-1] = temp;
	return nums;
}

----------------------------------------------------

public int[] midThree(int[] nums)
{
	int[] halfArr = new int[3];
	int half = nums.length/2;
	halfArr[0] = nums[half-1];
	halfArr[1] = nums[half];
	halfArr[2] = nums[half+1];
	return halfArr;
}

----------------------------------------------------

public int maxTriple(int[] nums)
{
	int max = nums[0];
	if(max <= nums[nums.length-1])
		max = nums[nums.length-1];
	if(max <= nums[nums.length/2])
		max = nums[nums.length/2];
	return max;
}

----------------------------------------------------

public int[] frontPiece(int[] nums)
{
	int[] front;
	if(nums.length >= 2)
	{
		front = new int[2];
		front[0] = nums[0];
		front[1] = nums[1];
	}
	else if(nums.length == 1)
	{
		front = new int[1];
		front[0] = nums[0];
	}
	else
		front = new int[0];
	return front;
}

----------------------------------------------------

public boolean unlucky1(int[] nums)
{
	int lastP = nums.length-1;
	if(lastP  >= 2)
	{
		if((nums[0] == 1 && nums[1] == 3) || (nums[1] == 1 && nums[2] == 3))
			return true;
		return (nums[lastP-1] == 1 && nums[lastP] == 3);
	}
	if(lastP  == 1)
		return ((nums[0] == 1 && nums[1] == 3) || (nums[1] == 1 && nums[2] == 3));
	return false;
}

----------------------------------------------------

public int[] make2(int[] a, int[] b)
{
	int[] comb = new int[2];
	if(a.length >= 2)
	{
		comb[0] = a[0];
		comb[1] = a[1];
	}
	else if(a.length == 1)
	{
		comb[0] = a[0];
		comb[1] = b[0];
	}
	else
	{
		comb[0] = b[0];
		comb[1] = b[1];	
	}
	return comb;
}

----------------------------------------------------

public int[] front11(int[] a, int[] b)
{
	int[] front;
	if(a.length >= 1)
	{
		if(b.length >= 1)
		{
			front = new int[2];
			front[0] = a[0];
			front[1] = b[0];
		}
		else
		{
			front = new int[1];
			front[0] = a[0];
		}
	}
	else if(b.length >= 1)
	{
		front = new int[1];
		front[0] = b[0];
	} 
	else
		front = new int[0];
	return front; 
}
